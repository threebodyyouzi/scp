#######################################################
环境准备：检查Yum是否可用

虚拟机A：
[root@svr7 ~]# yum clean all    #清空Yum缓存
[root@svr7 ~]# yum repolist 

虚拟机B： 
[root@pc207 ~]# yum clean all   #清空Yum缓存
[root@pc207 ~]# yum repolist  

######################################################
 常见的DNS服务器有哪些？
 主DNS  一级域名DNS  二级域名DNS  三级域名DNS   根域名DNS


 常见的DNS资源解析记录都有哪些？
 NS    A    PTR（反向解析记录）   CNAME
#####################################################
Split分离解析（视图解析）

• 当收到客户机的DNS查询请求的时候
 – 能够区分客户机的来源地址
 – 为不同类别的客户机提供不同的解析结果(IP地址)
 – 判断客户端的来源，不同的客户端解析同一个域名得到的解析结果不同
 – 针对不同的客户机就近提供服务器



• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:sina.com
– A记录分离解析 —— 以 www.sina.com 为例
客户机来自 解析结果
    192.168.4.207  ---------》   192.168.4.100
     其他地址          ---------》    1.2.3.4

#################################################
分离解析 
 1.客户端分类合理，所有的客户端都要匹配分类
 2.分类匹配，由上到下依次匹配，匹配及停止
 3.所有的zone必须在view中
 4.每一个view拥有所有的zone
虚拟机A：
[root@svr7 /]# vim /etc/named.conf
 options {
        directory       "/var/named";
 };
 view "nsd" {                             #分离解析，分类名称
 match-clients  {   192.168.4.207;   };   #匹配客户端源IP地址
  zone  "sina.com"  IN  {
        type  master;
        file  "sina.com.zone";            #指定地址库文件名字
   };
 };
 view  "other"  {                        #分离解析，分类名称
 match-clients  {   any;   };            #匹配客户端源IP地址
  zone  "sina.com"   IN  {
        type  master;
        file  "sina.com.other";          #指定地址库文件名字
   };
 };
# 建立地址库文件sina.com.zone与sina.com.other写入不同的解析结果
# 重起地址库文件
# nslookup www.sina.com 192.168.4.7

##############################################################
多区域分离解析

虚拟机A：
[root@svr7 /]# vim /etc/named.conf
 options {
        directory       "/var/named";
 };
view "nsd" {
 match-clients  { 192.168.4.207;   };
  zone "sina.com" IN {
        type master;
        file "sina.com.zone";
   };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";
   };
 };
view "other" {
 match-clients  { any;   };
  zone "sina.com" IN {
        type master;
        file "sina.com.other";
   };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.other";
   };
 };
########################################################
补充：• 为大批量的客户机地址建立列表  


acl test { 192.168.4.207; 192.168.4.1; 192.168.4.2;
           192.168.7.0/24; 192.168.4.200; };

view "nsd" {
 match-clients  {  test;   };
  ......

######################################################
RAID磁盘阵列

• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘
– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同



• RAID 0,条带模式
 – 同一个文档分散存放在不同磁盘
 – 并行写入以提高效率
 – 至少需要2块磁盘组成

• RAID 1,镜像模式
 – 一个文档复制成多份,分别写入不同磁盘
 – 多份拷贝提高可靠性,效率无提升
 – 至少需要2块磁盘组成

• RAID5,高性价比模式
 – 相当于RAID0和RAID1的折中方案
 – 需要至少一块磁盘的容量来存放校验数据
 – 至少需要3块磁盘组成

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要4块磁盘组成



• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少需要4块磁盘组成


RAID阵列实现方式
• 硬RAID:由RAID控制卡管理阵列
– 主板 --》 阵列卡 --》磁盘  --》操作系统 --》 数据

• 软RAID:由操作系统来管理阵列
– 主板 --》 磁盘  --》操作系统  --》 RAID软件 --》 数据

###############################################################
进程管理

    程序：静态的代码，占用硬盘空间

    进程：动态执行的代码，占用CPU、内存
  
     父进程、子进程        树形结构

     进程唯一编号：PID    越小越优先运行

##############################################

• pstree — Processes Tree
– 格式:pstree [选项] [PID或用户名]

• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号

  systemd:所有进程的父进程

[root@svr7 /]# pstree  lisi
[root@svr7 /]# pstree  -p lisi
bash(4037)───vim(4073)
[root@svr7 /]# pstree  -ap lisi
bash,4037
  └─vim,4073 a.txt
[root@svr7 /]# 


#######################################################
• ps — Processes Snapshot
– 格式:ps [选项]...

• 常用命令选项
– aux:显示当前终端所有进程(a)、当前用户在所有
    终端下的进程(x), 以用户格式输出(u)
– -elf:显示系统内所有进程(-e)、以长格式输出(-l)
    信息、包括最完整的进程信息(-f)


• ps aux 操作
  – 列出正在运行的所有进程

• ps -elf 操作(父进程的PPID)
  – 列出正在运行的所有进程


  如果想计算正在运行的进程个数？
[root@svr7 /]# wc -l /etc/passwd
[root@svr7 /]# ps aux | wc -l

[root@svr7 /]# find /etc/  -name "*tab" | wc -l
[root@svr7 /]# find /etc/ -name "*.conf" | wc -l

  请统计/boot/文件有多少个？
[root@svr7 /]# find /boot/ -type f | wc -l

#######################################################
进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]

[root@svr7 /]# top -d 1

   按 P（大写） 按照CPU使用进行排序
   按 M（大写） 按照内存使用进行排序

#######################################################
检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件

• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程

[root@svr7 /]# pgrep -l a              #显示进程名带有a字母的
[root@svr7 /]# pgrep -lU  lisi
[root@svr7 /]# pstree -p lisi

[root@svr7 /]# pgrep -l log

[root@svr7 /]# pgrep -lU lisi

[root@svr7 /]# pgrep -lU lisi -t pts/1

[root@svr7 /]# pgrep -lU lisi -t pts/2

###################################################
进程的前后台调度
• 后台启动
– 在命令行末尾添加“&”符号,不占用当前终端
• Ctrl + z 组合键
– 挂起当前进程(暂停并转入后台)
• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被挂起的任务


[root@svr7 /]# sleep 1000 &        #将进程正在运行放入后台
[root@svr7 /]# jobs                #查看后台进程信息

[root@svr7 /]# sleep  800
^[^Z                               #按Ctrl+z将进程暂停放入后台
[2]+  已停止               sleep 800
[root@svr7 /]# jobs                
[root@svr7 /]# bg  2             #将后台编号为2的进程，继续运行
[root@svr7 /]# jobs
[root@svr7 /]# fg 2            #将后台编号为2的进程，恢复前台运行
sleep 800
^C                             #按Ctrl+c将进程结束
[root@svr7 /]# jobs 
[root@svr7 /]# fg 1            #将后台编号为1的进程，恢复前台运行
sleep 1000
^C 						    #按Ctrl+c将进程结束

##########################################################
杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 
– killall [-9] 进程名...
– pkill  查找条件   
[root@svr7 /]# sleep 900 &
[root@svr7 /]# jobs -l   
[root@svr7 /]# kill 5886          #根据PID杀死进程

[root@svr7 /]# jobs -l

[root@svr7 /]# sleep 500 &   
[root@svr7 /]# sleep 600 &
[root@svr7 /]# sleep 700 &
[root@svr7 /]# jobs 
[root@svr7 /]# killall sleep      #根据进程名 杀死进程

[root@svr7 /]# jobs 
[root@svr7 /]# sleep 1000 &
[root@svr7 /]# jobs
[root@svr7 /]# killall -9 sleep   #强制杀死进程


  杀死一个用户开启的所有进程（强制踢出一个用户）
 [root@svr7 /]# killall -9 -u lisi

  书写防火墙或SELinux禁止用户登陆，书写脚本

#######################################################

日志管理
• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的“依据”


 /var/log/messages    记录内核消息、各种服务的公共消息
 /var/log/dmesg 	    记录系统启动过程的各种消息
 /var/log/cron        记录与cron计划任务相关的消息
 /var/log/maillog     记录邮件收发相关的消息
 /var/log/secure      记录与访问限制相关的安全消息

• 由系统服务rsyslog统一记录/管理
 – 日志消息采用文本格式
 – 主要记录事件发生的时间、主机、进程、内容

#####################################################


















































    













































































    














            


























































































































































































































