数据备份

物理备份(拷贝数据库下的目录)
--冷备:cp、tar
逻辑备份
--mysqldump
--mysql

完全备份
-备份所有数据:一台服务器上的所有数据;
              一个库的所有数据;
              一个表的所有数据;
增量备份:
-备份上次备份后,新产生的数据
差异备份
-备份完全备份后,所有新产生的数据
=========================================
物理备份:
50
#mkdir /bakdb
#cp -r /var/lib/mysql  /bakdb/db.bak

物理恢复
52
#rm -rf /var/lib/mysql/*
#scp -r 192.168.4.50:/bakdb/db.bak/* /var/lib/mysql/
#chown -R mysql:mysql /var/lib/mysql
#systemctl restart mysqld


==========================================
重新初始化授权库,只适合内有存储数据的数据库服务器
# systemctl stop mysqld.service 
# rm -rf /var/lib/mysql/*
# ls /var/lib/mysql/
# systemctl restart mysqld
# grep password /var/log/mysqld.log
===========================================
完全备份mysqldump
#mysqldump -uroot -p密码 库名 > 路径/xxx.sql
#mysqldump -uroot -p密码 -B 库名1 库名2 > 路径/yyy.sql //将多个库备份,恢复时不需要加库名
完全恢复
#mysql -uroot -p密码 库名 < 路径/xxx.sql
或者
mysql>source 备份文件的绝对路径

====================================================
增量备份
方法一:实时增量备份  启用mysql服务的binlog日志
binlog日志介绍:二进制日志,记录在数据库服务器上执行的除查询之外的sql命令,默认不启用

(1)启用binlog日志:
#vim /etc/my.cnf
[mysqld]
server_id=50                    //给服务器编号
log-bin=日志文件的名字
binlog_format="mixed"           //修改记录格式,sql命令和记录内容都保存

(2)日志存储位置
#ls /var/lib/mysql/host50-bin.*
/var/lib/mysql/host50-bin.000001              //日志文件
/var/lib/mysql/host50-bin.index               //日志索引文件
(3)查看日志文件的内容
#mysqlbinlog /var/lib/mysql/mysql50-bin.000001
(4)日志文件的方法:
偏移量position
时间点datatime
使用binlog日志恢复数据
#mysqlbinlog [选项] mysql-bin.000001 |mysql -uroot -p
常用选项:
--start-datetime="yyyy-mm-dd hh:mm:ss"
--stop-datetime="yyyy-mm-dd hh:mm:ss"
--start-position=数字
--stop-position=数字
(5)管理日志文件
#mkdir /mylog
#vim /etc/my.cnf
[mysqld]
log-bin=/mysql/bak         //指定日志文件存储位置,存储名字

默认日志文件大小超过500M时自动增加日志文件
mysql>show master status;   //显示当前备份的日志文件名和偏移位置 
mysql>flush logs;           //刷新当前备份的日志文件
#mysqldump -uroot -p密码 --flush-logs  db3 user > /mydata/user2.sql   //先备份库,再刷新
#mysql -uroot -p密码 db3 -e "flush logs"  

删除已有的binlog日志文件
mysql>reset master;              //清除所有的日志文件,重新生成第一个
mysql>purge master logs to "日志文件名";     //删除指定文件前的所有日志文件
================================================================================
方法二:使用第三方软件percona提供的命令 innobackupex做增量备份
XtraBackup
-备份过程中不锁表,适合生产环境
主要含两个软件:
-xtrabackup:C程序,支持innodb/XtraDB
-innobackupex:以perl脚本分装xtrabackuo,支持MyISAM

innobackupex完全备份与恢复
innobackupex增量备份与恢复
innobackupex恢复完全备份中一个表的所有数据

(1)完全备份
#innobackupex --user root --password 密码  备份位置        //不需要提前创建备份位置
(2)恢复数据
#systemctl stop mysqld
#rm -rf /val/lib/mysql/*
#innobackupex --user root --password 密码 --apply-log 备份位置   //准备还原(回滚日志)
#innobackupex --user root --password 密码 --copy-back 备份位置   //恢复数据
#chown -R mysql:mysql /var/lib/mysql 
#systemctl restart mysqld


(3)增量备份(在线热备不锁表)
第一次备份:备份所有数据
#innobackupex --user root --password 密码 --incremental 备份位置    //增量备份
                                                         --incremental-basedir=目录名  //指定上一次备份存储的目录名

(4)恢复
++++++++++++++++++++++++++
1.准备恢复数据
备份目录下的相关文件:                     
#cat 路径/xtrabackup_checkpoints  
backup_type = full-backuped        
from_lsn = 0
to_lsn = 2707506                       
last_lsn = 2707515
compact = 0
recover_binlog_info = 0   

#cat 增量备份路径/xtrabackup_checkpoints 
backup_type = incremental
from_lsn = 2707506
to_lsn = 2712387
last_lsn = 2712396
compact = 0
 
xtrabackup_checkpoints  记录当前目录数据备份类型和数据备份信息       
++++++++++++++++++++++++++
2.合并日志
ibdate1
ibdate1.meta            //未提交的SQL命令
xtrabackup_logfile      //已经提交的SQL命令
+++++++++++++++++++++++++++++++
3.把备份数据拷贝到目录下
#rm -rf /var/lib/mysql/*
#innobackupex --user root --password 密码 --apply-log --redo-only 完整备份的路径名   //完整恢复
#innobackupex --user root --password 密码 --apply-log --redo-only 完整备份的路径名    --incremental-dir="增量备份1路径名"               //恢复增量1
#innobackupex --user root --password 密码 --apply-log --redo-only 完整备份的路径名    --incremental-dir="增量备份2路径名"               //恢复增量2
#innobackupex --user root --password 密码 --copy-log 完整备份的路径名  //拷贝文件
#chown -R mysql:mysql /var/lib/mysql/
++++++++++++++++++++++++++
innodbackupex 恢复完全备份中一个表

恢复表:
(1)导出表信息
innobackupex --user root  --password 密码 --databases="库名" --apply-log --export /db5full
增加文件
*.cfg  
*.exp
(2)创建删除的表
新创建的表结构必须与原表一致
(3)删除表空间:存储数据的表文件  表.ibd
mysql>alter table 库名.表名 discard tablespace;
(4)拷贝表信息文件到数据库目录下
cp /db5full/库名/表名.{cfg,exp,ibd} /var/lib/mysql/库名/

(5)修改表文件的所有者和所有组
chown -R mysql:mysql  /var/lib/mysql/db5/
(6)导入表信息
mysql> alter table 库名.表名 import tablespace; 
#rm -rf /var/lib/mysql/库名/表名.{cfg,exp}          //导入完成后不再需要信息文件,可以删除









































