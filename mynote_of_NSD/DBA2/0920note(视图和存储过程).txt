视图的概念
-虚拟表
-内容与真实的表相似,有字段有记录
-视图并不在数据库中以存储的数据形式存在
-行和列的数据来自定义视图时查询所引用的基表,并且在具体引用视图时动态生成
-更新视图的数据,就是更新基表的数据
-更新基表数据,视图的数据也会跟着改变


优点
简单、安全、数据独立
-用户只能看到视图中的数据
-一旦视图结构确定,可以屏蔽表结构对用户的影响
-用户不需关心视图中的数据如何查询获得
-视图中的数据已经是过滤好的符合条件的结果集

使用限制
-不能在视图上创建索引
-在视图的FROM子句中不能使用子查询

试图基本使用:
1.创建视图
-create view 视图名称 as SQL查询
-create view 视图名称(字段名列表) as SQL查询
----在视图表中不定义字段名的话,默认使用基表的字段名,若定义字段名的话,视图表中的字段必须和基表的字段个数相等。
例:
(1)
mysql> use db9;
mysql> create view v1 as select name,uid,shell from db9.user;
mysql> create view v2(vname,vuid) as select name,uid from db9.user;
mysql> show tables;
mysql> select * from v1;
mysql> grant select on db9.v1 to yaya@'%' identified by "123qqq...A";

]# mysql -uyaya -p123qqq...A
mysql> use db9;
mysql> select * from v1;

2.查看视图
(1)查看哪些表是视图表
mysql> show table status\G      //查看当前库下所有表的状态信息,comment="view"的表是视图表
(2)查看创建视图具体命令
mysql> show create view 视图表\G

3.使用视图
对视图进行操作,基表也会发生改变
查询记录
– Select 字段名列表 from 视图名 where 条件;
• 插入记录
– Insert into 视图名(字段名列表) values(字段值列表);
• 更新记录
– Update 视图名 set 字段名=值 where 条件;
• 删除记录
– Delete from 视图名 where 条件;

4.视图进阶
(1)设置别名
视图中的字段名不可以重复 所以要定义别名
– create view 视图名
as
select 表别名.源字段名 as 字段别名
from 源表名 表别名 left join 源表名 表别名
on 条件;
例:
mysql> create table t1 select name,uid ,shell from user limit 3;
mysql> create table t2 select name,uid ,homedir from user limit 5;
mysql> create view v3 as 
         > select t1.name as vname,t2.name as v2name,t1.uid as vuid,t2.uid as v2uid,shell,homedir
            > from t1,t2 where t1.name=t2.name;
(2)重要选项--or replace
– Create or replace view 视图名 as select 查询;
– 创建时,若视图已存在,会替换已有的视图
(3)重要选项--algorithm
--algorithm={undefined|merage|temptable}
--merage,替换方式;
--temptable,具体化方式      //创建视图时,先执行as后的SQL查询语序,将结果存入内存,再执行创建指令
--undefined,未定义
(4)重要选项--LOCAL和CASCADED
– LOCAL 仅检查当前视图的限制,超出限制则不被允许修改
– CASCADED 同时要满足基表的限制(默认值)
末尾加上检查选项 with local check option

================================================================
存储过程
一.定义:相当于mysql语句组成的脚本,指的是数据库中保存的一系列SQL命令的集合,可以在存储过程中使用变量、条件判断、流程控制等
   优点:提高性能/减轻网络负担/防止对表的直接访问/避免重复编写SQL操作


二.基本使用
1.创建存储过程
mysql>delimiter //
mysql>create procedure 存储过程名()
      >begin
        >SQL指令等功能代码;
          >end//
mysql>delimiter;
delimiter关键字用来指定存储过程的分隔符(默认为;)

2.查看存储过程
mysql> show procedure status;
mysql> select db,name,type from mysql.proc where name="存储过程名";
mysql> select body from mysql.proc where name="存储过程名";           //查看某个存储过程的功能
3.调用/删除存储过程
mysql> call 存储过程名();
mysql> drop procedure 存储过程名();

4.变量
会话变量、全局变量:会话变量和全局变量叫系统变量 使用set命令定义
                    全局变量的修改会影响到整个服务器,但是对会话变量的修改,只会影响到当前的会话。
                     select @@hostname;
用户变量:在客户端连接到数据库服务的整个过程中都是有效的。当当前连接断开后所有用户变量失效。
         定义:set@变量名=值;   输出:select @变量名;
局部变量:存储过程中的begin/end。其有效范围仅限于该语句块中,语句块执行完毕后,变量失效。
         declare专门用来定义局部变量。

算数运算:
+     加法运算 SET @var1=2+2;          4
-      减法运算 SET @var2=3-2;           1
*      乘法运算 SET @var3=3*2;          6
/      除法运算 SET @var4=10/3;          3.333333333
DIV  整除运算 SET @var5=10 DIV 3;      3
%      取模 SET @var6=10%3 ;            1

5.流程控制:
单分支选择结构
– 当“条件成立”时执行命令序列
if 条件测试 then
代码 .. ..
end if ;

双分支选择架构
– 当“条件成立”时执行代码1;否则执行代码2

if 条件测试 then
代码1 .. ..
else
代码2 .. ..
end if;

6.循环结构
(1)while条件式循环:反复测试条件,只要成立就执行命令序列
while 条件判断 do
循环体
.. ..
end while ;

(2)loop死循环:无条件、反复执行某一段代码
loop
循环体
.. ..
end loop;

(3)repeat条件式循环:当条件成立时结束循环
repeat
循环体
.. ..
until 条件判断
end repeat;










