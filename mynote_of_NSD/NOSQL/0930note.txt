MongoDB副本集
• 副本集工作过程
– 至少需要两个节点。其中一个是主节点,负责处理客户端请求,其余是从节点,负责复制主节点数据
– 常见搭配方式:一主一从、一主多从
– 主节点记录所有操作oplog,从节点定期轮询主节点获
取这些操作,然后对自己的数据副本执行这些操作,
从而保证从节点的数据与主节点一致


一.配置Replica Sets
1.
1.1修改配置文件
]# vim /usr/local/mongodb/etc/mongodb.conf
replSet=rs1                                 //启用副本集配置
1.2创建副本集
(1)定义主机成员列表
]# mongo --host 192.168.4.51 --port 27051
config = {                             //集合名随意
_id:"rs1",
members:[
{_id:0,host:"192.168.4.51:27051"},
{_id:1,host:"192.168.4.52:27052"},
{_id:2,host:"192.168.4.53:27053"}
]
}
(2)初始化环境
– > rs.initiate(config)
(3)查看副本集信息
• 查看状态信息
– > rs.status( )
• 查看是否是master库
– > rs .isMaster( )
(4)验证副本集配置
• 同步数据验证,允许从库查看数据
– >db.getMongo( ).setSlaveOk( )
• 自动切换主库验证
– > rs.isMaster( )

测试副本集的高可用性能
当前的主库宕机后,会自动咋对应的2个从库里选举出新的主库.剩下的主机会自动做新的主库的从库,客户端链接新的主库存储数据

二.管理命令
1.插入文档
(1)
save()
• 格式
> db.集合名.save({ key:“值”,key:”值”})
• 注意
– 集合不存在时创建集合,然后再插入记录
– _id字段值已存在时,修改文档字段值
– _id字段值不存在时,插入文档
(2)
insert()
• 格式
> db.集合名.insert({key:"值",key:"值"})
• 注意
– 集合不存在时创建集合,然后再插入记录
– _id字段值已存在时,放弃插入
– _id字段值不存在时,插入文档
(3)插入多条记录
> db.集合名.insertMany()

2.查询文档
(1)
• 显示所有行(默认输出20行,输入it可显示后续行)
> db.集合名.find()
• 显示第1行
> db.集合名.findOne()
• 指定查询条件并指定显示的字段
> db.集合名.find({条件},{定义显示的字段})
> db.user.find({},{_id:0,name:1,shell:1})  //0 不显示,1 显示
(2)
• limit(数字)
> db.集合名.find().limit(3)  //显示前几行
• skip(数字)
> db.集合名.find().skip(2)  //跳过前几行
• sort(字段名)
> db.集合名.find().sort({age:1|-1})
>db.user.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).ski
p(2).limit(2)                   //1升序,-1降序
(3)统计个数
>db.集合名.find({},{}).count()
(4)匹配条件
• 简单条件
> db.集合名.find({key:"值"})
> db.集合名.find({key:"值",keyname:"值"})
• 范围比较
– $in 在...里
– $nin 不在...里
– $or 或
• 正则匹配
> db.user.find({name: /^a/ })
• 数值比较
– $lt $lte $gt $gte $ne
– <   <=    >   >=   !=
• 匹配null ,也可以匹配没有的字段

3.更新文档
(1)
update()
• 语法格式
> db.集合名.update({条件},{修改的字段})
(2)
• $set 条件匹配时,修改指定字段的值
> db.user.update({条件},$set: {修改的字段})
• $unset 删除与条件匹配文档的字段
> db.集合名.update({条件},{$unset:{key:values}})
(3)
• $inc 条件匹配时,字段值自加或自减
> db.集合名.update({条件},{$inc:{字段名:数字}})
+num 自增,-num 自减
(4)
• $push 向数组中添加新元素
> db.集合名.update({条件},{$push:{数组名:"值"}})
• $addToSet 避免重复添加
> db.集合名.update({条件},{$addToSet:{数组名:"值"}})
• $pop 从数组头部删除一个元素
> db.集合名.update({条件},{$pop:{数组名:数字}})
1 删除数组尾部元素
-1 删除数组头部元素
• $pull 删除数组指定元素
> db.集合名.update({条件},{$pull:{数组名:值}})

4.删除文档
• $drop 删除集合的同时删除索引
> db.集合名.drop( )
• $remove() 删除文档时不删除索引
> db.集合名.remove({})
> db.集合名.remove({条件})


